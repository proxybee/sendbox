{"version":3,"sources":["../../src/controllers/ParcelsController.js"],"names":["dotenv","config","tDate","Date","updatedDate","format","Parcels","req","res","newOrder","id","senderId","user","weight","body","weightMetric","status","fromAddress","toAddress","currentLocation","itemName","recipient","postDate","console","log","fieldError","json","statusCode","message","createQuery","db","query","then","result","Msg","rowCount","Message","data","rows","error","adminStatus","params","newStatus","editedBy","newDestination","email"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\nimport moment from 'moment';\nimport { v4 as uuid4 } from 'uuid';\nimport db from '../models/index';\nimport sendUpdateEmail from '../helpers/updateNotification';\nimport {\n  createParcelsSchema,\n  destinationSchema,\n  // changeCurrentLocation,\n  currentLocationSchema,\n  changeStatusSchema,\n} from '../helpers/validator';\n\ndotenv.config();\nconst tDate = new Date();\nconst updatedDate = moment(tDate).format('MM/DD/YYYY, HH:MM');\n\nclass Parcels {\n  static create(req, res) {\n    const newOrder = {\n      id: uuid4(),\n      senderId: req.user,\n      weight: req.body.weight,\n      weightMetric: 'kg',\n      status: 'pending',\n      fromAddress: req.body.fromAddress,\n      toAddress: req.body.toAddress,\n      currentLocation: req.body.fromAddress,\n      itemName: req.body.itemName,\n      recipient: req.body.recipient,\n      postDate: moment(tDate).format('MM/DD/YYYY, HH:MM'),\n    };\n    console.log(new Date());\n    const fieldError = createParcelsSchema(newOrder);\n    if (fieldError) {\n      return res\n        .status(400)\n        .json({ status: res.statusCode, message: fieldError });\n    }\n    const createQuery = `INSERT INTO parcels (id,senderId,weight,weightMetric,status,fromAddress,toAddress,currentLocation,itemName,recipient,postDate) \n                  VALUES('${newOrder.id}','${newOrder.senderId}','${newOrder.weight}','${newOrder.weightMetric}','${newOrder.status}','${newOrder.fromAddress}'\n                  ,'${newOrder.toAddress}','${newOrder.currentLocation}','${newOrder.itemName}','${newOrder.recipient}','${newOrder.postDate}') returning *`;\n    db.query(createQuery)\n      .then((result) => {\n        let Msg;\n        if (result.rowCount === 0) {\n          Msg = res\n            .status(500)\n            .json({\n              status: res.statusCode,\n              Message:\n                'An error occurred while trying to save your order ensure that weight is a valid number and Address are not empty',\n            });\n        } else if (result.rowCount >= 1) {\n          Msg = res.status(201).json({\n            status: res.statusCode,\n            message: 'New parcel added successfully',\n            data: result.rows[0],\n            rows: result.rowCount,\n          });\n        }\n        return Msg;\n      })\n      .catch((error) => {\n        res\n          .status(500)\n          .json({\n            status: res.statusCode,\n            error: `An error occurred while trying to save your order ${error}`,\n          });\n      });\n    return false;\n  }\n\n  static getAll(req, res) {\n    if (!req.adminStatus) {\n      const query = `SELECT * FROM parcels where placedBy ='${req.user}'`;\n      db.query(query)\n        .then((result) => {\n          let Msg;\n          if (result.rowCount === 0) {\n            Msg = res\n              .status(204)\n              .json({\n                status: res.statusCode,\n                error: 'You have not created any parcels',\n              });\n          }\n          if (result.rowCount >= 1) {\n            Msg = res.status(200).json({\n              status: res.statusCode,\n              rows: result.rowCount,\n              data: result.rows,\n            });\n          }\n          return Msg;\n        })\n        .catch((error) => {\n          res\n            .status(500)\n            .json({\n              status: res.statusCode,\n              'Could not get parcels from database': error,\n            });\n        });\n    } else {\n      const query = 'SELECT * FROM parcels';\n      db.query(query)\n        .then((result) => {\n          let Msg;\n          if (result.rowCount === 0) {\n            Msg = res\n              .status(204)\n              .json({ status: res.statusCode, error: 'No Parcels' });\n          }\n          if (result.rowCount >= 1) {\n            Msg = res.status(200).json({ status: res.statusCode, data: result.rows });\n          }\n          return Msg;\n        })\n        .catch((error) => {\n          res\n            .status(500)\n            .json({\n              status: res.statusCode,\n              'Could not get parcels from database': error,\n            });\n        });\n    }\n  }\n\n  static getOne(req, res) {\n    const { id } = req.params;\n    if (!req.adminStatus) {\n      const query = `SELECT * FROM parcels WHERE id='${id}' AND placedBy='${req.user}'`;\n      db.query(query)\n        .then((result) => {\n          let Msg;\n          if (result.rowCount === 0) {\n            Msg = res\n              .status(400)\n              .json({\n                status: res.statusCode,\n                error: 'You do not own such parcel delivery order',\n              });\n          }\n          if (result.rowCount >= 1) {\n            res\n              .status(200)\n              .json({ status: res.statusCode, data: result.rows[0] });\n          }\n          return Msg;\n        })\n        .catch((error) => {\n          res\n            .status(500)\n            .json({\n              status: res.statusCode,\n              'Could not get parcels from database': error,\n            });\n        });\n    } else {\n      const query = `SELECT * FROM parcels WHERE ID='${id}'`;\n      db.query(query)\n        .then((result) => {\n          let Msg;\n          if (result.rowCount === 0) {\n            Msg = res\n              .status(204)\n              .json({ status: res.statusCode, error: 'No such parcel' });\n          }\n          if (result.rowCount >= 1) {\n            res\n              .status(200)\n              .json({ status: res.statusCode, data: result.rows[0] });\n          }\n          return Msg;\n        })\n        .catch((error) => {\n          res\n            .status(500)\n            .json({\n              status: res.statusCode,\n              'Internal server error, please try again later': error,\n            });\n        });\n    }\n  }\n\n  static cancel(req, res) {\n    const { id } = req.params;\n    const newStatus = 'canceled';\n    const query = `UPDATE parcels SET status='${newStatus}',updatedDate='${updatedDate}' WHERE id='${id}' AND senderId='${req.user}' AND status NOT IN ('delivered','canceled') returning *`;\n    db.query(query)\n      .then((result) => {\n        let Msg;\n        if (result.rowCount === 0) {\n          Msg = res\n            .status(400)\n            .json({\n              status: 400,\n              error: 'Ensure you are the owner of the parcel, and it not yet delivered or canceled',\n            });\n        }\n        if (result.rowCount >= 1) {\n          Msg = res\n            .status(200)\n            .json({\n              status: 200,\n              message: 'Your parcel delivery order has been canceled ',\n              data: result.rows[0],\n            });\n        }\n        return Msg;\n      })\n      .catch((error) => res\n        .status(500)\n        .json({ status: 500, 'Internal server error, please try again later': error }));\n  }\n\n  static changeDestination(req, res) {\n    const { id } = req.params;\n    const editedBy = req.user;\n    const fieldError = destinationSchema(req.body);\n    if (fieldError) {\n      return res.status(400).json({ status: 400, error: fieldError });\n    }\n    const newDestination = req.body.toAddress;\n    const query = `UPDATE parcels SET toAddress='${newDestination}',updatedDate='${updatedDate}' WHERE id='${id}' AND senderId='${editedBy}' AND status NOT IN ('delivered','canceled') returning *`;\n    db.query(query)\n      .then((result) => {\n        let Msg;\n        if (result.rowCount === 0) {\n          Msg = res\n            .status(400)\n            .json({\n              status: 400,\n              Message: 'Bad request, ensure that you own the parcel and it is not yet delivered or canceled',\n            });\n        }\n        if (result.rowCount >= 1) {\n          Msg = res\n            .status(200)\n            .json({\n              status: 200,\n              Message: 'The destination has been changed successfully ',\n            });\n        }\n        return Msg;\n      })\n      .catch((error) => res\n        .status(500)\n        .json({\n          status: 500,\n          'An error ocurred while trying to change the parcel Destination, try again': error,\n        }));\n    return false;\n  }\n\n  static changeCurrentLocation(req, res) {\n    if (req.adminStatus) {\n      const { id } = req.params;\n      const fieldError = currentLocationSchema(req.body);\n      if (fieldError) {\n        return res.status(400).json({ status: 400, error: fieldError });\n      }\n      const { currentLocation } = req.body;\n      const query = `UPDATE parcels SET currentLocation='${currentLocation}',updatedDate='${updatedDate}' WHERE id='${id}' AND (status != 'canceled' AND status != 'canceled') returning *`;\n      db.query(query)\n        .then((result) => {\n          let Msg;\n          if (result.rowCount === 0) {\n            Msg = res\n              .status(400)\n              .json({ status: 400, error: 'No such parcel' });\n          }\n          if (result.rowCount >= 1) {\n            res\n              .status(200)\n              .json({\n                status: 200,\n                Message:\n                  'The current location of the order has been updated successfully ',\n              });\n          }\n          return Msg;\n        })\n        .catch((error) => {\n          res\n            .status(500)\n            .json({\n              status: 500,\n              'Internal server error, please try again later': error,\n            });\n        });\n    } else {\n      res.json({ Message: 'Only Admins can access this route' });\n    }\n    return false;\n  }\n\n  static changeStatus(req, res) {\n    if (req.adminStatus) {\n      const { id } = req.params;\n\n      const fieldError = changeStatusSchema(req.body);\n      if (fieldError) {\n        return res\n          .status(400)\n          .json({ status: res.statusCode, error: fieldError });\n      }\n      const { status } = req.body;\n      const query = `UPDATE parcels SET status='${status}',updatedDate='${updatedDate}' WHERE id='${id}' AND status NOT IN ('delivered','canceled')`;\n      db.query(query)\n        .then((result) => {\n          let Msg;\n          if (result.rowCount === 0) {\n            Msg = res\n              .status(400)\n              .json({\n                status: 400,\n                error:\n                'Could not find the parcel in database',\n              });\n          }\n          if (result.rowCount >= 1) {\n            sendUpdateEmail(req.email);\n            res\n              .status(200)\n              .json({\n                status: 200,\n                Message:\n                  'The status of the parcel has been changed successfully ',\n              });\n          }\n          return Msg;\n        })\n        .catch((error) => {\n          res\n            .status(500)\n            .json({\n              status: 500,\n              'Internal server error, please try again later': error,\n            });\n        });\n    } else {\n      res.json({ Message: 'Only Admins can access this route' });\n    }\n    return false;\n  }\n}\n\nexport default Parcels;\n"],"file":"ParcelsController.js"}