{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["dotenv","config","tDate","Date","User","req","res","body","email","password","length","status","send","message","Helper","isValidEmail","hashedPassword","hashPassword","newUser","id","firstName","firstname","lastName","lastname","otherNames","othernames","username","isVerified","isAdmin","registered","format","fieldError","userQuery","db","query","then","result","rowCount","json","error","console","log","detail","table","loginData","lastLogin","comparePassword","rows","tokenData","isadmin","token","generateToken","adminStatus","data","Message","params","adminstatus"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\nimport moment from 'moment';\nimport { v4 as uuid4 } from 'uuid';\nimport db from '../models';\nimport Helper from '../helpers/helper';\nimport { signUpSchema, loginSchema } from '../helpers/validator';\n\ndotenv.config();\nconst tDate = new Date();\nclass User {\n  static signup(req, res) {\n    if (\n      !req.body.email\n      || !req.body.password\n      || req.body.password.length <= 4\n    ) {\n      return res.status(400).send({ message: 'Some values are missing' });\n    }\n    if (!Helper.isValidEmail(req.body.email)) {\n      return res\n        .status(400)\n        .send({ message: 'Please enter a valid email address' });\n    }\n    const hashedPassword = Helper.hashPassword(req.body.password);\n    const newUser = {\n      id: uuid4(),\n      firstName: req.body.firstname,\n      lastName: req.body.lastname,\n      otherNames: req.body.othernames,\n      email: req.body.email,\n      username: req.body.username,\n      isVerified: 'false',\n      isAdmin: 'false',\n      password: hashedPassword,\n      registered: moment(tDate).format('MM/DD/YYYY, HH:MM'),\n    };\n    const fieldError = signUpSchema(newUser);\n    if (fieldError) {\n      return res.status(500).send({ message: fieldError });\n    }\n    const userQuery = `INSERT INTO users (id,firstName,lastName,otherNames,email,username,isVerified,isAdmin,password,registered) \n                    VALUES('${newUser.id}','${newUser.firstName}','${newUser.lastName}','${newUser.otherNames}','${newUser.email}',\n                    '${newUser.username}','${newUser.isVerified}','${newUser.isAdmin}','${newUser.password}','${newUser.registered}')`;\n    db.query(userQuery)\n      .then((result) => {\n        if (result.rowCount >= 1) {\n          res\n            .status(200)\n            .json({ status: 200, message: 'User saved successfully' });\n        } else if (result.rowCount === 0) {\n          res\n            .status(500)\n            .json({ status: 500, message: 'The user could not be saved' });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        res.status(500).json({\n          status: 500,\n          'An error occurred while trying to save user': error.detail,\n          table: error.table,\n        });\n      });\n    return false;\n  }\n\n  static login(req, res) {\n    if (loginSchema(req.body)) {\n      return res\n        .status(400)\n        .send({ message: 'Either email or password is missing or incorrect' });\n    }\n    const loginData = {\n      email: req.body.email,\n      password: req.body.password,\n      lastLogin: moment(tDate).format('MM/DD/YYYY, HH:MM'),\n    };\n    const query = `SELECT * FROM users WHERE email='${loginData.email}'`;\n    db.query(query)\n      .then((result) => {\n        if (result.rowCount === 0) {\n          res.status(400).json({\n            status: 400,\n            error:\n              'An error occurred while trying to log you in Check your details again',\n          });\n        } else if (result.rowCount >= 1) {\n          if (\n            !Helper.comparePassword(result.rows[0].password, req.body.password)\n          ) {\n            res\n              .status(400)\n              .json({ message: 'The credentials you provided are incorrect' });\n          }\n          const tokenData = {\n            id: result.rows[0].id,\n            isAdmin: result.rows[0].isadmin,\n            username: result.rows[0].username,\n            email: result.rows[0].email,\n          };\n          delete loginData.password;\n          const token = Helper.generateToken(tokenData);\n          res.status(200).json({ token, message: 'Login successful' });\n        }\n      })\n      .catch((error) => {\n        console.log('The login error', error);\n        res.status(500).json({\n          status: 500,\n          error:\n            'This is an internal server error, try again later again',\n        });\n      });\n    return false;\n  }\n\n  static getAll(req, res) {\n    const query = 'SELECT * FROM users';\n    console.log(req.adminStatus);\n    if (req.adminStatus) {\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            res.status(404).json({ status: 404, message: 'No Users Found' });\n          } else if (result.rowCount >= 1) {\n            res.json({ status: 200, rows: result.rowCount, data: result.rows });\n          }\n        })\n        .catch((error) => {\n          res.status(500).json({\n            status: 500,\n            message: 'An error occurred when trying to get users from database',\n            error,\n          });\n        });\n    } else {\n      res.status(403).json({ Message: 'Only Admins can access this route' });\n    }\n  }\n\n  static getOne(req, res) {\n    const { id } = req.params;\n    if (req.adminStatus) {\n      const query = `SELECT * FROM users WHERE id='${id}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            res\n              .status(204)\n              .json({ status: 204, message: 'No Such User Found' });\n          } else if (result.rowCount >= 1) {\n            res.json({ status: 200, data: result.rows });\n          }\n        })\n        .catch((error) => {\n          res.status(500).json({\n            status: 500,\n            'An error occurred when trying to get user from database': error,\n          });\n        });\n    } else {\n      res\n        .status(403)\n        .json({ status: 403, message: 'This is an admin functionality' });\n    }\n  }\n\n  static getUserParcels(req, res) {\n    const { id } = req.params;\n    if (req.adminStatus) {\n      const query = `SELECT * FROM parcels WHERE senderId='${id}'`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            res.status(400).json({\n              status: 400,\n              message: 'User has no parcel delivery orders',\n            });\n          } else if (result.rowCount >= 1) {\n            res.status(200).json({ status: 200, rows: result.rowCount, data: result.rows });\n          }\n        })\n        .catch((error) => {\n          res.status(500).json({\n            status: 500,\n            'An error occurred when trying to get user parcels from database':\n              error,\n          });\n        });\n    } else {\n      res.status(403).json({ Message: 'Only Admins can access this route' });\n    }\n  }\n\n  static makeAdmin(req, res) {\n    if (req.adminStatus) {\n      const { id } = req.params;\n      const adminstatus = true;\n      const query = `UPDATE users SET isAdmin='${adminstatus}' WHERE id='${id}' RETURNING *`;\n      db.query(query)\n        .then((result) => {\n          if (result.rowCount === 0) {\n            res.status(204).json({ status: 204, error: 'No such User' });\n          }\n          if (result.rowCount >= 1) {\n            res.status(200).json({\n              status: 200,\n              Message: 'The user has been made an Admin successfully ',\n            });\n          }\n        })\n        .catch((error) => {\n          res.status(500).json({\n            status: 500,\n            'An error occurred while trying to make user an Admin, try again':\n              error,\n          });\n        });\n    } else {\n      res.status(403).json({ Message: 'Only Admins can access this route' });\n    }\n  }\n}\n\nexport default User;\n"],"file":"UsersController.js"}